param int rem_p = 38; /* 2^(4*64) mod p      */

// ** addition
// ************************************************************************

fn add(reg u64[5] x, stack u64[5] ya) -> reg u64[5] {

  inline int i;

  for i = 0 to 5 {
    x[i] += ya[i];
  }

  return x;
}


// ** subtraction
// ************************************************************************

fn sub(reg u64[5] x, stack u64[5] ya) -> reg u64[5] {
  inline int i;
  reg u64 tmp1;

  tmp1 = 0xFFFFFFFFFFFDA;
  x[0] += tmp1;
  x[0] -= ya[0];

  for i = 1 to 5 {
     tmp1 = 0xFFFFFFFFFFFFE;
     x[i] += tmp1;
     x[i] -= ya[i];
  }

  return x;
}

// ** reduction from 10 limbs to 5 limbs
// ************************************************************************

fn del_carry(reg u64[5] sh, stack u64[5] sl) -> reg u64[5] {
  reg u64[5] r;
  reg u64 t;
  inline int i;

  r[0] = sl[0];
  _, _, _, _, _, sh[0] = #x86_SHLD(sh[0],r[0],13);
  r[0] &= 0x7ffffffffffff;  
  for i = 0 to 4 {
      r[i+1] = sl[i+1];
      _, _, _, _, _, sh[i+1] = #x86_SHLD(sh[i+1],r[i+1],13);
      r[i+1] &= 0x7ffffffffffff;      
      r[i+1] += sh[i];
  }
  t = sh[4];
  t *= 19;
  r[0] += t;

  for i = 0 to 5 {
     t = r[i];
     t >>= 51;
     if (i < 4) {
       r[i+1] += t;
     }
     else {
      t *= 19;
      r[0] += t;
     }
     r[i] &= 0x7ffffffffffff;
  }

  return r;
}

// ** multiplication
// ************************************************************************

fn mul(stack u64[5] xa, stack u64[5] ya) -> reg u64[5] {
  inline int i;
  reg u64[5] r;
  reg u64 mh;
  reg u64 ml;
  reg u64 tmp;
  reg u64 r19;
  reg u64[5] sh;
  stack u64[5] sl;
  stack u64[5] yax19;
  reg bool cf;

  for i = 1 to 5 {
      tmp = ya[i];
      tmp *= 19;
      yax19[i] = tmp;
  }

  //s0 := x0y0 + x1(19y4) + x2(19y3) + x3(19y2) + x4(19y1)
  tmp = yax19[1]; mh, ml = tmp * xa[4];     sl[0]  = ml;    sh[0]  = mh;
  tmp = yax19[2]; mh, ml = tmp * xa[3]; cf, sl[0] += ml; _, sh[0] += mh + cf;
  tmp = yax19[3]; mh, ml = tmp * xa[2]; cf, sl[0] += ml; _, sh[0] += mh + cf;
  tmp = yax19[4]; mh, ml = tmp * xa[1]; cf, sl[0] += ml; _, sh[0] += mh + cf;
  tmp = ya[0]   ; mh, ml = tmp * xa[0]; cf, sl[0] += ml; _, sh[0] += mh + cf;

  // s1 := x0y1 + x1y0 + x2(19y4) + x3(19y3) + x4(19y2)
  tmp = yax19[2]; mh, ml = tmp * xa[4];     sl[1]  = ml;     sh[1]  = mh;
  tmp = yax19[3]; mh, ml = tmp * xa[3]; cf, sl[1] += ml; _, sh[1] += mh + cf;
  tmp = yax19[4]; mh, ml = tmp * xa[2]; cf, sl[1] += ml; _, sh[1] += mh + cf;
  tmp = ya[0]   ; mh, ml = tmp * xa[1]; cf, sl[1] += ml; _, sh[1] += mh + cf;
  tmp = ya[1]   ; mh, ml = tmp * xa[0]; cf, sl[1] += ml; _, sh[1] += mh + cf;

  // s2 := x0y2 + x1y1 + x2y0 + x3(19y4) + x4(19y3)
  tmp = yax19[3]; mh, ml = tmp * xa[4];     sl[2]  = ml;     sh[2]  = mh;
  tmp = yax19[4]; mh, ml = tmp * xa[3]; cf, sl[2] += ml; _, sh[2] += mh + cf;
  tmp = ya[0]   ; mh, ml = tmp * xa[2]; cf, sl[2] += ml; _, sh[2] += mh + cf;
  tmp = ya[1]   ; mh, ml = tmp * xa[1]; cf, sl[2] += ml; _, sh[2] += mh + cf;
  tmp = ya[2]   ; mh, ml = tmp * xa[0]; cf, sl[2] += ml; _, sh[2] += mh + cf;

  // s3 := x0y3 + x1y2 + x2y1 + x3y0 + x4(19y4)
  tmp = yax19[4]; mh, ml = tmp * xa[4];     sl[3]  = ml;     sh[3]  = mh;
  tmp = ya[0]   ; mh, ml = tmp * xa[3]; cf, sl[3] += ml; _, sh[3] += mh + cf;
  tmp = ya[1]   ; mh, ml = tmp * xa[2]; cf, sl[3] += ml; _, sh[3] += mh + cf;
  tmp = ya[2]   ; mh, ml = tmp * xa[1]; cf, sl[3] += ml; _, sh[3] += mh + cf;
  tmp = ya[3]   ; mh, ml = tmp * xa[0]; cf, sl[3] += ml; _, sh[3] += mh + cf;

  // s4 :=x0y4 +x1y3 +x2y2 +x3y1 +x4y0.
  tmp = ya[0]; mh, ml = tmp * xa[4];        sl[4]  = ml;    sh[4]  = mh;
  tmp = ya[1]; mh, ml = tmp * xa[3];    cf, sl[4] += ml; _, sh[4] += mh + cf;
  tmp = ya[2]; mh, ml = tmp * xa[2];    cf, sl[4] += ml; _, sh[4] += mh + cf;
  tmp = ya[3]; mh, ml = tmp * xa[1];    cf, sl[4] += ml; _, sh[4] += mh + cf;
  tmp = ya[4]; mh, ml = tmp * xa[0];    cf, sl[4] += ml; _, sh[4] += mh + cf;

  r = del_carry(sh,sl);

  return r;
}

// ** multiplication by small constant 121666
// ************************************************************************

fn mul121666(stack u64[5] xa) -> reg u64[5] {
  inline int i;
  reg u64[5] r;
  reg u64 mh;
  reg u64 ml;

   mh = 0x3B684000;
   mh, ml = mh * xa[0];
   ml >>= 13;
   r[0] = ml;
   r[1] = mh;

   for i = 1 to 5 {
       mh = 0x3B684000;
       mh, ml = mh * xa[i];
       ml >>= 13;
       _, ml += r[i];
       r[i] = ml;
       if (i < 4) {
          r[i+1] = mh;
       }
       else {
          mh *= 19;
          _, mh+= r[0];
          r[0] = mh;
       }
   }
  return r;
}

// ** squaring
// ************************************************************************

fn square(stack u64[5] xa) -> reg u64[5] {
  inline int i;
  reg u64[5] r;
  reg u64 mh;
  reg u64 ml;
  reg u64[5] sh;
  stack u64[5] sl;
  reg u64 tmp;
  reg bool cf;

  tmp = xa[0];
  mh, ml = tmp * xa[0];
  sl[0] = ml;
  sh[0] = mh;
  for i = 1 to 5 {
     tmp = xa[0];
     tmp <<= 1;
     mh, ml = tmp * xa[i];
     sl[i] = ml;
     sh[i] = mh;
  }


   //s0 := x0^2 + 38x1x4 + 38x2x3
   tmp = xa[1];
   tmp *= 38;
   mh, ml = tmp * xa[4]; cf, sl[0] += ml; _, sh[0] += mh + cf;
   tmp = xa[2];
   tmp *= 38;
   mh, ml = tmp * xa[3]; cf, sl[0] += ml; _, sh[0] += mh + cf;

   // s1 := 2x0x1 + 19x3^2 + 38x2x4
   tmp = xa[3];
   tmp *= 19;
   mh, ml = tmp * xa[3]; cf, sl[1] += ml; _, sh[1] += mh + cf;
   tmp = xa[2];
   tmp *= 38;
   mh, ml = tmp * xa[4]; cf, sl[1] += ml; _, sh[1] += mh + cf;

  // s2 := 2x0x2 + x1^2 + 38x3x4
   tmp = xa[1];
   mh, ml = tmp * xa[1]; cf, sl[2] += ml; _, sh[2] += mh + cf;
   tmp = xa[3];
   tmp *= 38;
   mh, ml = tmp * xa[4]; cf, sl[2] += ml; _, sh[2] += mh + cf;

  // s3 := 2x0x3 + 19x4^2 + 2x1x2
   tmp = xa[4];
   tmp *= 19;
   mh, ml = tmp * xa[4]; cf, sl[3] += ml; _, sh[3] += mh + cf;
   tmp = xa[1];
   tmp <<= 1;
   mh, ml = tmp * xa[2]; cf, sl[3] += ml; _, sh[3] += mh + cf;

  // s4 := 2x0x4 + x2^2 + 2x1x3
   tmp = xa[2];
   mh, ml = tmp * xa[2]; cf, sl[4] += ml; _, sh[4] += mh + cf;
   tmp = xa[1];
   tmp <<= 1;
   mh, ml = tmp * xa[3]; cf, sl[4] += ml; _, sh[4] += mh + cf;

  r = del_carry(sh,sl);

  return r;
}

fn iterated_square(stack u64[5] xa, stack u64 n) -> stack u64[5] {

  reg bool cf;
  reg u64 n_r;
  reg u64[5] res;

  while {
  res = square(xa);
  xa = res;
  n_r = n;
  cf, n_r -= 1;
  n = n_r;
  }(!cf)

  return xa;
}

// ** ladderstep
// ************************************************************************

fn ladderstep(stack u64[5] x1p, stack u64[5] x2p, stack u64[5] z2p, stack u64[5] x3p, stack u64[5] z3p)
    -> (stack u64[5] , stack u64[5] , stack u64[5] , stack u64[5]) {

  reg u64[5] t1;
  reg u64[5] t2;
  reg u64[5] t7;
  reg u64[5] t6;
  reg u64[5] t5;
  reg u64[5] t3;
  reg u64[5] t4;
  reg u64[5] t9;
  reg u64[5] t8;
  stack u64[5] t1p;
  stack u64[5] t2p;
  stack u64[5] t7p;
  stack u64[5] t6p;
  stack u64[5] t5p;
  stack u64[5] t3p;
  stack u64[5] t4p;
  stack u64[5] t9p;
  stack u64[5] t8p;
  reg u64[5] w1;
  reg u64[5] w2;
  reg u64[5] w3;
  reg u64[5] w4;
  reg u64[5] w5;
  reg u64[5] w6;
  reg u64[5] w7;

  t1      = x2p;
  t2      = t1;
  t1      = add(t1,z2p);
  t2      = sub(t2,z2p);
  t1p     = t1;
  t2p     = t2;
  t7      = square(t2p);
  t7p     = t7;
  t6      = square(t1p);
  t6p     = t6;
  t5      = t6;
  t5      = sub(t5,t7p);
  t5p     = t5;
  t3      = x3p;
  t4      = t3;
  t3      = add(t3,z3p);
  t4      = sub(t4,z3p);
  t3p     = t3;
  t4p     = t4;
  t9      = mul(t3p,t2p);
  t9p     = t9;
  t8      = mul(t4p,t1p);
  w1      = t8;
  w1      = add(w1,t9p);

  t8      = sub(t8,t9p);
  x3p     = w1;
  z3p     = t8;
  w2      = square(x3p);
  x3p     = w2;
  w3      = square(z3p);
  z3p     = w3;
  w4      = mul(z3p,x1p);
  z3p     = w4;
  w5      = mul(t6p,t7p);
  x2p     = w5;

  w6      = mul121666(t5p);
  w6      = add(w6,t7p);
  z2p     = w6;
  w7      = mul(z2p,t5p);
  z2p     = w7;

  return x2p, z2p, x3p, z3p;
}

// ** cswap
// ************************************************************************

fn cswap(stack u64[5] x2p, stack u64[5] z2p, stack u64[5] x3p, stack u64[5] z3p, reg u64 swap)
    -> (stack u64[5] , stack u64[5] , stack u64[5] , stack u64[5]) {

  reg u64 tmp1;
  reg u64 tmp2;
  reg u64 tmp3;
  reg bool cf;
  inline int i;

  cf, swap -= 1;

  for i = 0 to 5 {
    tmp1   = x2p[i];
    tmp2   = x3p[i];
    tmp3   = tmp1;
    tmp1   = tmp2 if !cf;
    tmp2   = tmp3 if !cf;
    x2p[i] = tmp1;
    x3p[i] = tmp2;

    tmp1   = z2p[i];
    tmp2   = z3p[i];
    tmp3   = tmp1;
    tmp1   = tmp2 if !cf;
    tmp2   = tmp3 if !cf;
    z2p[i] = tmp1;
    z3p[i] = tmp2;
  }

  return x2p, z2p, x3p, z3p;
}

// ** montgomery ladder
// ************************************************************************

fn mladder(stack u64[5] x2, stack u64[5] z2, stack u64[5] xr, reg u64 sp) -> (stack u64[5], stack u64[5]) {

  stack u64    s;
  reg u64      tmp1;
  reg u64      tmp2;
  reg u64      bit;
  reg u64      swap;
  stack u64    prevbit;
  stack u64[5] x1;
  stack u64[5] x3;
  stack u64[5] z3;
  reg u64      i;
  reg u64      j;
  stack u64    is;
  stack u64    js;
  reg bool     cf;
  reg u64[5]   buf;

  buf = xr; x1 = buf; x3 = buf;
  x2[0] = 1; x2[1] = 0; x2[2] = 0; x2[3] = 0; x2[4] = 0;
  z2[0] = 0; z2[1] = 0; z2[2] = 0; z2[3] = 0; z2[4] = 0;
  z3[0] = 1; z3[1] = 0; z3[2] = 0; z3[3] = 0; z3[4] = 0;

  j = 62; i = 3; prevbit = 0;
  while {
    tmp1 = [sp + 8*i];
    is = i;
    s = tmp1;
    while {
      tmp2 = s;
      bit = tmp2 >> j;
      js = j;
      bit = bit & 1;
      swap = prevbit;
      swap ^= bit;
      prevbit = bit;
      x2,z2,x3,z3 = cswap(x2,z2,x3,z3,swap);
      x2,z2,x3,z3 = ladderstep(x1,x2,z2,x3,z3);
      j = js;
      j -= 1;
    } (j >=s 0)
    j = 63;
    i = is;
    i -= 1;
  } (i >=s 0)
  return x2, z2;
}

// ** inversion
// ************************************************************************

fn invert(stack u64[5] xa) -> stack u64[5] {
  stack u64[5] z2;
  stack u64[5] t;

  reg u64[5] buf;
  reg u64[5] buf1;

  stack u64[5] z9;
  stack u64[5] z11;
  stack u64[5] z2_5_0;
  stack u64[5] z2_10_0;
  stack u64[5] z2_20_0;
  stack u64[5] z2_50_0;
  stack u64[5] z2_100_0;
  inline int i;
  reg u64 k;
  stack u64 ks;

  buf = square(xa);   z2 = buf;
  buf = square(z2);   t = buf;
  buf = square(t);    t = buf;
  buf = mul(t,xa);    z9 = buf;
  buf = mul(z9,z2);   z11 = buf;
  buf = square(z11);  t =  buf;
  buf = mul(t,z9);    z2_5_0 = buf;

  buf = square(z2_5_0); t = buf;
  /* 4 times */ ks = 3; t = iterated_square(t, ks);
  buf = mul(t, z2_5_0); z2_10_0 = buf;

  buf = square(z2_10_0); t = buf;
  /* 9 times */ ks = 8; t = iterated_square(t, ks);
  buf = mul(t,z2_10_0); z2_20_0 = buf;

  buf = square(z2_20_0); t = buf;
  /* 19 times */ ks = 18; t = iterated_square(t, ks);
  buf = mul(t,z2_20_0); t = buf;

  buf = square(t); t = buf;
  /* 9 times */ ks = 8; t = iterated_square(t, ks);
  buf = mul(t,z2_10_0); z2_50_0 = buf;

  buf = square(z2_50_0); t = buf;
  /* 49 times */ ks = 48; t = iterated_square(t, ks);
  buf = mul(t,z2_50_0); z2_100_0 = buf;

  buf = square(z2_100_0); t = buf;
  /* 99 times */ ks = 98; t = iterated_square(t, ks);
  buf = mul(t,z2_100_0); t = buf;

  buf = square(t); t = buf;
  /* 49 times */ ks = 48; t = iterated_square(t, ks);
  buf = mul(t,z2_50_0); t = buf;

  buf = square(t); t = buf;
  buf = square(t); t = buf;
  buf = square(t); t = buf;
  buf = square(t); t = buf;

  buf = square(t); t = buf;
  buf = mul(t,z11); xa = buf;

  return xa;
}

// ** unpack_point
// ************************************************************************

fn unpack_point(stack u64[5] xa, reg u64 xp) -> stack u64[5] {
  reg u64 tmp1;
  reg u64 tmp2;
  reg u64 prev;
  inline int i;

  tmp1 = [xp + 0*8]; 
  prev = tmp1;
  tmp1 &= 0x7ffffffffffff; // keep 51 bits
  xa[0] = tmp1;
  
  for i = 1 to 4 {
     tmp1 = prev;
     tmp2 = [xp +     i*8];
     prev = tmp2;
     if (i == 1) {
       tmp1 >>= 51; // already used 51
       tmp2 <<= 13; // that leaves 13 
     }
     if (i == 2) {
       tmp1 >>= 38; // already used (51-13)
       tmp2 <<= 26; // that leaves 26
     }     
     if (i == 3) {
       tmp1 >>= 25; // already used (51-26)
       tmp2 <<= 39; // that leaves 39
     }
     tmp1 |= tmp2;
     tmp1 &= 0x7ffffffffffff;
     xa[i] = tmp1;
  }

  tmp1 = [xp + 3*8];
  tmp1 >>= 12;
  xa[4] = tmp1;

  return xa;
}

// ** unpack_secret
// ************************************************************************

fn unpack_secret(reg u64 sp) {
  reg u64[4] sa;
  reg u64 si;
  reg u64 buf;
  inline int i;

  si    = [sp + 0*8];
  si    = si & 0xfffffffffffffff8;
  sa[0] = si;
  sa[1] = [sp + 1*8];
  sa[2] = [sp + 2*8];
  si    = [sp + 3*8];
  buf = 0x7fffffffffffffff;
  si    = si & buf;
  buf = 0x4000000000000000;
  si    = si | buf;
  sa[3] = si;
  for i = 0 to 4 { [sp + 8*i] = sa[i]; }
}

// ** freeze
// ************************************************************************

fn freeze(stack u64[5] xa) -> stack u64[5] {
  reg u64 two51minus1;
  reg u64 two51minus19;
  reg u64 loop;
  reg u64 zero;
  reg u64 t;
  reg u64 tmp;
  inline int i;
  reg bool cf;

  loop = 3;
  while {
      for i = 0 to 4 {
         t = xa[i];
         tmp = t;
         t >>= 51;
         tmp &= 0x7ffffffffffff;
         xa[i] = tmp;
         t += xa[i+1];
         xa[i+1] = t;
      }
      t = xa[4];
      tmp = t;
      t >>= 51;
      tmp &= 0x7ffffffffffff;
      xa[4] = tmp;

      t *= 19;
      t += xa[0];
      xa[0] = t;

      loop -= 1;
  } (loop > 0)

  t = 1;
  zero = 0;

  tmp = xa[0];
  two51minus19 = 0x7ffffffffffed;
  t = zero if (tmp < two51minus19);

  two51minus1 =  0x7ffffffffffff;
  for i = 1 to 5 {
      tmp = xa[i];
      t = zero if (tmp != two51minus1);
  }

  t = -t;
  two51minus1 &= t;
  two51minus19 &= t;
  xa[0] -= two51minus19;
  for i = 1 to 5 {
      xa[i] -= two51minus1;
  }
  return xa;
}

// ** pack
// ************************************************************************

// assumes input x reduced below 2^255 */
fn pack(reg u64 rp, stack u64[5] xa) {
  inline int i;
  reg u64 tmp1;
  reg u64 tmp2;

  xa = freeze(xa);
  
  for i = 0 to 4 {
    tmp1 = xa[i];
    tmp2 = xa[i+1];
    if (i == 0) {
      tmp2 <<= 51; // will fill above 51
    }
    if (i == 1) {
      tmp1 >>= 13; // 64 - 51 bits used
      tmp2 <<= 38; // will fill above 51 - 13
    }
    if (i == 2) {
      tmp1 >>= 26; // 64 - 38 bits used 
      tmp2 <<= 25; // will fill above 51 - 26
    }
    if (i == 3) {
      tmp1 >>= 39; // 64 - 25 bits used
      tmp2 <<= 12; // will fill above 51 - 39
    }
    tmp1 |= tmp2;
    [rp + (i*8)] = tmp1;
  }
}

// ** scalar multiplication
// ************************************************************************

 export fn scalarmult( reg u64 rp /* address to store result  */
                    , reg u64 sp /* address of secret scalar */
                    , reg u64 pp /* address of point         */) {
  stack u64[5] save;
  stack u64[5] xr;
  stack u64[5] xa;
  stack u64[5] za;
  stack u64[5] rs;
  reg u64[5] r;
  reg u64 buf;
  inline int i;

  for i = 0 to 4 { buf = [sp + 8*i]; save[i] = buf; }
  unpack_secret(sp);
  xr = unpack_point(xr,pp);
  xa, za = mladder(xa,za,xr,sp);
  za = invert(za);
  r = mul(xa,za);
  rs = r;
  pack(rp,rs);

  for i = 0 to 4 { buf = save[i]; [sp + 8*i] = buf; }
 
}


// tests: NOT BEING EXPORTED

 fn test_ladderstep( reg u64 x1pp
                         , reg u64 x2pp
                         , reg u64 z2pp
                         , reg u64 x3pp
                         , reg u64 z3pp
                         , reg u64 r1p) {
   stack u64[5] x1p;
   stack u64[5] x2p;
   stack u64[5] z2p;
   stack u64[5] x3p;
   stack u64[5] z3p;
   reg u64 buf;
   inline int i;

   x1p = unpack_point(x1p,x1pp);
   x2p = unpack_point(x2p,x2pp);
   z2p = unpack_point(z2p,z2pp);
   x3p = unpack_point(x3p,x3pp);
   z3p = unpack_point(z3p,z3pp);

   x2p,z2p,x3p,z3p = ladderstep(x1p,x2p,z2p,x3p,z3p);

   pack(r1p,x2p);
   r1p += 32;
   pack(r1p,z2p);
   r1p += 32;
   pack(r1p,x3p);
   r1p += 32;
   pack(r1p,z3p);
 
}

 fn test_mladder( reg u64 rp 
                      , reg u64 sp 
                      , reg u64 pp) {

  stack u64[5] p;
  stack u64[5] x;
  stack u64[5] z;

  p = unpack_point(p,pp);
  x,z = mladder(x,z,p,sp);
  pack(rp,x);
  rp += 32;
  pack(rp,z);
}

 fn test_mul(reg u64 rp, reg u64 xap, reg u64 yap) {
   reg u64[5] res;
   stack u64[5] ress;
   stack u64[5] xa; 
   stack u64[5] ya;
   reg u64 buf;
   inline int i;
  
    xa = unpack_point(xa,xap);
    ya = unpack_point(ya,yap);

    res = mul(xa,ya); ress = res;

    pack(rp,ress);
}

 fn test_unpack(reg u64 rp,reg u64 xap) {
     stack u64[5] res; 
     reg u64 buf;
     inline int i;
  
     res = unpack_point(res,xap);
     //pack(rp,res);
    for i = 0 to 5 { buf = res[i]; [rp + 8*i] = buf; }

}
